buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
        nodePluginVersion = '1.1.1'
    }
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.epam.petclinic:petclinic-plugins:${petclinicPluginsVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:$nodePluginVersion")
    }
}

// apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'com.moowork.node'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    //compile('org.springframework.boot:spring-boot-starter-actuator')
    //compile('org.springframework.cloud:spring-cloud-starter-config')
    //compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.springframework.cloud:spring-cloud-starter-eureka')
}

// dependencyManagement {
//     imports {
//         mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
//     }
// }

node {
    // Version of node to use.
    version = '7.10.0'
    //version = '6.10.2'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // distBaseUrl = 'http://artifacts.copyright.com/rup-software/org/nodejs/'
    distBaseUrl = 'https://nodejs.org/dist/'

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
}

npmInstall {
    args = [
            '--unicode', 'false',
            '--production',
            '--loglevel', 'warn'
    ]
}

def npmScriptPrefix = 'npm_run'
tasks.addRule("Pattern: {npm_run}_<task name>") { String taskName ->
    if (taskName.startsWith(npmScriptPrefix)) {
        tasks[taskName].dependsOn tasks.npmInstall
    }
}

task cleanUI(type: Delete) << {
    [
            'node_modules'
    ].each {
        println 'Deleting ' + it
        delete it
    }
}

tasks.clean.dependsOn tasks.cleanUI
tasks.classes.dependsOn tasks['npm_run_build']

test {
    systemProperty 'spring.profiles.active', 'test'
}

[processResources, processTestResources]*.doFirst {
    expand(project.properties)
}
